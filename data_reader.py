import shapefile
import tripy
import json
import numpy as np
from geo.shapes import Point, Polygon, Triangle
from geo.spatial import triangulatePolygon
from geo.generator import randomConvexPolygon, randomConcaveTiling
from geo.drawer import plot, plotPoints, show, showPoints
from graph import DirectedGraph, UndirectedGraph
from kirkpatrick import Locator
import matplotlib.pyplot as plt


from Naked.toolshed.shell import execute_js, muterun_js

from polytri import triangulate
from triangulator import earcut

idxes = [1,999,998,997,996,995,992,991,990,990,989,988,988,987,986,984,983,982,982,981,980,979,978,977,976,975,974,973,972,971,971,970,969,969,968,967,967,966,965,965,964,963,962,961,960,960,959,958,957,956,955,953,952,951,950,949,948,948,947,946,946,945,944,944,943,942,941,940,939,939,938,937,937,936,935,935,934,933,933,932,931,931,930,929,929,928,927,927,926,925,925,924,923,923,922,921,921,920,919,919,918,917,917,916,915,912,911,910,910,909,908,908,907,906,905,904,903,902,901,900,900,899,898,898,897,896,894,893,892,891,890,889,886,885,884,883,882,881,881,880,879,879,878,877,877,876,875,871,870,869,869,868,867,867,866,865,865,864,863,863,862,861,859,858,857,856,855,854,853,852,851,849,848,847,847,846,845,844,843,842,842,841,840,840,839,838,838,837,836,836,835,834,831,830,829,829,828,827,827,826,825,825,824,823,823,822,821,821,820,819,818,817,816,815,814,813,812,811,810,810,809,808,808,807,806,804,803,802,802,801,800,799,798,797,797,796,795,795,794,793,793,792,791,790,789,788,788,787,786,786,785,784,784,783,782,781,780,779,779,778,777,777,776,775,775,774,773,773,772,771,771,770,769,768,767,766,766,765,764,763,762,761,761,760,759,757,756,755,754,753,752,752,751,750,750,749,748,748,747,746,746,745,744,744,743,742,741,740,739,738,737,736,736,735,734,733,732,731,729,728,727,726,725,724,723,722,721,720,719,718,718,717,716,715,714,713,712,711,710,710,709,708,707,706,705,705,704,703,703,702,701,701,700,699,699,698,697,697,696,695,695,694,693,692,691,690,690,689,688,688,687,686,685,684,683,681,680,679,679,678,677,677,676,675,675,674,673,671,670,669,669,668,667,666,665,664,664,663,662,662,661,660,660,659,658,658,657,656,654,653,652,652,651,650,649,648,647,647,646,645,643,642,641,641,640,639,638,637,636,636,635,634,632,631,630,630,629,628,628,627,626,625,624,623,623,622,621,621,620,619,618,617,616,614,613,612,611,610,609,609,608,607,606,605,604,603,602,601,600,599,598,597,596,595,595,594,593,591,590,589,587,586,585,585,584,583,583,582,581,580,579,578,578,577,576,576,575,574,574,573,572,570,569,568,566,565,564,563,562,561,560,559,558,557,556,555,553,552,551,550,549,548,548,547,546,544,543,542,542,541,540,539,538,537,536,535,534,533,532,531,529,528,527,527,526,525,525,524,523,523,522,521,521,520,519,518,517,516,515,514,513,513,512,511,510,509,508,508,507,506,504,503,502,502,501,500,499,498,497,497,496,495,494,493,492,492,491,490,489,488,487,485,484,483,483,482,481,480,479,478,478,477,476,474,473,472,469,468,467,465,464,463,463,462,461,461,460,459,454,453,452,451,450,449,448,447,446,446,445,444,444,443,442,442,441,440,439,438,437,436,435,434,434,433,432,432,431,430,430,429,428,426,425,424,423,422,421,421,420,419,418,417,416,416,415,414,414,413,412,411,410,409,408,407,406,405,404,403,403,402,401,401,400,399,399,398,397,397,396,395,395,394,393,393,392,391,390,389,388,388,387,386,384,383,382,382,381,380,379,378,377,375,374,373,373,372,371,371,370,369,369,368,367,367,366,365,365,364,363,363,362,361,360,359,358,357,356,355,355,354,353,353,352,351,351,350,349,347,346,345,345,344,343,342,341,340,339,338,337,337,336,335,334,333,332,332,331,330,330,329,328,327,326,325,325,324,323,322,321,320,320,319,318,318,317,316,316,315,314,313,312,311,311,310,309,309,308,307,307,306,305,305,304,303,303,302,301,301,300,299,297,296,295,295,294,293,292,291,290,288,287,286,286,285,284,284,283,282,282,281,280,280,279,278,278,277,276,275,274,273,273,272,271,269,268,267,267,266,265,264,263,262,261,260,259,259,258,257,257,256,255,255,254,253,253,252,251,251,250,249,248,247,246,245,244,243,242,241,240,240,239,238,237,236,235,235,234,233,233,232,231,231,230,229,229,228,227,227,226,225,225,224,223,222,221,220,220,219,218,216,215,214,214,213,212,212,211,210,210,209,208,208,207,206,205,204,203,203,202,201,201,200,199,198,197,196,196,195,194,194,193,192,192,191,190,190,189,188,187,186,185,185,184,183,183,182,181,181,180,179,179,178,177,176,175,174,174,173,172,172,171,170,170,169,168,168,167,166,166,165,164,164,163,162,161,160,159,159,158,157,157,156,155,154,153,152,151,150,149,148,147,146,146,145,144,143,142,141,141,140,139,138,137,136,136,135,134,134,133,132,131,130,129,127,126,125,125,124,123,122,121,120,120,119,118,117,116,115,112,111,110,110,109,108,108,107,106,106,105,104,104,103,102,101,100,99,99,98,97,97,96,95,95,94,93,93,92,91,89,88,87,87,86,85,85,84,83,83,82,81,81,80,79,78,77,76,76,75,74,74,73,72,70,69,68,68,67,66,65,64,63,62,61,60,60,59,58,57,56,55,55,54,53,49,48,47,46,45,44,44,43,42,40,39,38,38,37,36,36,35,34,34,33,32,32,31,30,30,29,28,28,27,26,26,25,24,24,23,22,20,19,18,18,17,16,15,14,13,11,10,9,9,8,7,7,6,5,5,4,3,3,2,1,1,998,997,997,995,994,993,992,990,988,986,985,984,982,980,979,977,976,976,974,973,973,971,969,967,965,963,960,958,957,954,953,951,950,948,946,939,937,935,933,931,929,925,923,921,921,919,917,917,915,914,910,908,906,902,900,898,898,896,895,891,889,888,886,884,883,881,879,877,877,875,874,872,871,869,865,863,861,859,857,856,856,854,853,849,847,845,844,842,840,838,836,834,832,831,829,827,825,823,818,816,815,812,810,808,808,806,805,805,804,802,802,800,799,799,797,795,795,793,791,790,788,786,784,782,781,777,775,773,773,771,769,768,766,764,764,763,761,757,755,754,752,750,748,748,746,744,744,742,741,741,739,738,738,736,734,729,727,726,726,724,723,723,721,720,718,716,715,712,710,708,705,703,701,699,697,695,695,693,692,688,686,685,685,683,682,681,679,677,671,669,667,660,658,656,654,652,650,649,647,645,643,641,639,632,630,628,628,626,625,621,619,618,618,616,615,614,612,611,609,607,606,603,601,600,600,598,597,592,591,589,587,585,583,583,581,580,580,578,576,576,574,572,570,568,567,560,558,557,553,551,550,542,540,539,536,534,533,533,531,530,529,527,525,525,523,521,518,516,515,515,513,511,510,508,506,505,504,502,502,500,499,497,495,494,494,492,490,489,487,486,485,483,481,480,478,476,475,474,472,469,467,466,466,465,463,463,461,459,454,452,451,451,449,448,446,444,442,439,437,436,436,434,432,432,430,428,426,424,423,418,416,414,414,412,411,409,408,406,405,403,401,401,399,397,397,395,393,390,388,386,385,384,382,379,377,376,376,375,373,365,363,361,360,358,357,357,355,353,351,349,348,348,347,345,342,340,339,339,337,335,335,334,332,330,328,327,327,325,323,322,320,318,316,314,313,311,309,307,307,305,303,301,299,298,297,295,293,292,290,289,288,286,284,284,282,280,278,276,275,273,271,270,267,265,264,264,262,261,261,259,257,255,253,251,245,243,242,240,238,237,237,235,233,231,229,227,225,223,222,222,220,218,216,214,212,212,210,208,205,203,201,201,199,198,198,196,194,194,192,190,190,188,187,185,183,181,179,177,176,176,174,172,172,170,168,168,166,164,164,162,161,161,159,157,157,155,154,154,152,151,151,149,148,148,146,144,139,138,136,127,125,123,120,118,117,117,115,114,112,110,108,104,102,101,101,99,97,97,95,93,93,91,90,89,87,85,83,81,79,76,74,72,68,66,65,62,60,58,57,55,53,49,47,46,46,44,42,38,36,34,34,32,30,30,28,26,26,24,22,21,20,18,18,16,15,15,13,12,11,9,7,3,1,997,997,994,993,993,990,988,985,984,980,980,979,976,976,973,969,962,960,957,954,951,950,950,946,944,941,939,935,935,933,929,925,921,917,917,914,913,912,910,906,903,902,898,892,891,888,886,883,881,881,877,874,872,869,867,860,859,856,856,853,851,849,845,844,840,838,834,832,829,827,827,823,821,819,818,815,813,812,808,808,805,802,802,799,795,795,791,790,784,781,779,773,769,768,764,761,759,758,757,754,748,744,741,741,738,734,729,726,723,723,720,718,718,715,713,713,712,708,701,699,695,695,692,690,690,688,685,681,677,675,671,667,666,662,660,656,655,654,650,650,649,645,643,639,638,633,632,628,628,625,623,623,621,618,618,615,614,609,606,604,604,603,600,592,589,588,588,587,583,583,580,576,576,572,571,561,560,557,554,553,550,542,539,537,530,529,525,525,521,519,510,506,505,505,502,499,494,490,489,486,485,481,476,475,472,466,463,459,455,454,451,451,448,446,446,442,440,440,439,436,436,432,428,426,423,421,419,418,414,414,411,409,409,406,405,405,401,397,397,393,391,391,390,386,386,385,382,365,361,360,357,353,351,348,345,343,342,339,335,335,332,330,330,327,323,322,318,316,311,307,303,303,301,298,293,292,289,288,284,280,273,270,269,261,257,255,242,240,237,237,233,231,231,227,225,225,222,218,206,205,201,201,198,194,190,187,185,185,181,179,176,172,168,164,161,157,157,154,151,151,148,144,139,136,134,128,127,123,120,117,114,112,108,106,106,104,101,101,97,93,85,83,79,78,76,72,63,62,58,57,53,52,49,46,42,38,34,30,30,26,22,18,15,12,12,11,7,3,997,993,988,985,980,980,976,969,962,957,955,950,944,942,942,941,935,935,929,927,927,925,917,912,906,905,903,898,895,892,888,887,881,874,873,872,867,865,860,856,851,850,849,844,840,834,833,827,821,819,819,815,813,813,808,802,802,795,790,784,779,777,777,773,768,764,759,758,758,754,752,752,748,741,741,734,733,729,723,718,718,713,708,705,701,695,690,685,682,671,666,664,662,656,655,650,645,644,633,628,623,623,618,614,604,600,597,592,588,583,583,576,571,561,557,555,555,554,550,530,525,519,510,505,499,476,472,471,455,451,446,446,440,436,436,428,427,427,426,421,419,414,409,409,405,397,397,391,386,386,382,380,365,360,357,357,351,348,348,343,342,342,335,330,322,316,313,311,303,298,289,288,280,261,255,251,242,237,231,231,225,218,206,201,194,190,185,179,176,168,164,164,157,151,141,139,134,128,123,122,120,114,113,112,106,101,101,93,90,85,79,78,78,72,71,58,57,52,50,49,42,38,30,22,18,12,7,3,993,988,988,980,969,963,962,955,954,950,942,942,935,927,927,917,913,913,912,905,903,895,894,886,881,873,872,865,861,861,860,851,851,850,844,827,819,813,813,802,790,786,784,777,777,768,764,758,752,741,741,733,731,730,729,718,718,708,707,705,695,690,690,682,681,671,664,662,662,655,650,650,644,643,634,633,623,623,614,611,609,604,597,592,583,571,563,561,555,555,550,548,530,519,518,510,499,497,480,476,471,456,455,446,446,436,427,421,419,409,409,397,386,357,348,342,342,330,323,289,280,278,261,251,249,245,242,231,231,218,217,208,206,194,190,179,176,176,164,151,143,141,134,122,120,113,112,101,90,85,78,71,58,52,51,40,38,22,21,18,7,3,988,969,963,955,954,942,927,913,913,905,903,903,894,892,886,873,872,872,861,851,851,844,840,827,813,790,790,786,777,777,764,758,758,741,731,730,718,707,705,690,681,636,634,623,623,611,609,609,597,595,593,592,571,563,555,548,533,530,518,511,510,497,481,480,471,456,446,427,409,386,380,342,323,322,293,289,278,264,261,249,245,231,217,208,194,190,190,176,151,144,143,134,113,112,90,89,85,71,58,51,50,40,22,21,21,7,5,5,3,969,963,954,942,913,903,892,886,872,851,832,827,790,790,777,758,758,731,730,730,707,705,705,681,675,638,636,623,623,609,595,595,593,571,563,548,546,533,518,515,511,497,494,481,471,470,457,456,427,409,380,379,342,322,313,293,278,275,267,264,249,246,245,217,208,190,151,144,134,132,122,113,90,89,71,70,63,58,50,40,21,5,5,969,967,963,942,913,887,886,851,790,758,730,730,705,675,638,623,595,595,571,570,564,563,546,536,533,515,511,494,489,486,481,470,457,427,421,409,379,376,357,342,313,297,293,275,267,249,248,246,217,216,212,208,151,151,144,132,128,122,90,89,70,68,41,40,5,5,967,963,963,913,892,887,851,840,790,730,675,643,638,595,595,570,567,564,546,545,536,515,511,486,470,469,457,421,409,409,376,373,365,357,313,269,267,248,246,216,212,212,151,132,128,90,89,89,68,65,42,41,5,5,963,892,887,840,833,790,675,673,643,595,567,566,564,545,537,536,511,486,469,466,458,457,409,409,373,371,365,313,311,269,248,246,246,212,132,128,89,65,42,5,892,790,673,672,650,643,567,566,545,544,542,537,511,458,409,371,365,311,298,273,269,246,246,132,131,129,128,65,50,42,892,832,790,672,662,650,567,542,511,489,459,458,371,365,298,297,273,246,131,131,129,65,63,50,892,833,832,672,662,567,566,544,542,489,459,371,369,275,273,131,65,63,892,833,672,671,662,566,544,544,489,486,466,459,369,297,275,131,131,65,892,833,671,662,662,544,486,466,369,367,365,297,131,131,892,887,887,833,662,662,486,466,466,367,365,365,131,887,887,662,466,466,365,887]

idxes2_out = [
  14, 0,  1,  2,  3,  4,  4,  5,  6, 6,
   7, 8,  8,  9, 10, 11, 12, 13, 14, 1,
   2, 4,  6,  8, 11, 13, 14, 14,  2, 4,
   4, 8, 10, 11, 14,  4,  4, 10, 11
]
idxes2 = [[661,112],[661,96],[666,96],[666,87],[743,87],[771,87],[771,114],[750,114],[750,113],[742,113],[742,106],[710,106],[710,113],[666,113],[666,112]]


with shapefile.Reader("./GSHHS_c_L1.shp") as shp:
    shapes = shp.shapes()

polygons = [shape.points for shape in shapes]

t = []
flattened = []

ANIMATE = True

rp = polygons[:1]#reversed(polygons)


def runLocator(regions,outline,point_to_id):
    # Pre-process regions
    l = Locator(regions,outline=outline)

    if ANIMATE:
       show(regions)
       plot(l.boundary, style='g--')
       show(regions)


    n = 50
    # Ensure correctness
    for region in reversed(regions):
        # Test n random interior points per region
        for k in range(n):
            target = region.smartInteriorPoint()
            target_region = l.locate(target)

        # Animate one interior point
        if ANIMATE:
            plot(l.regions)
            plot(target_region, style='ro-')
            showPoints(target, style='bo')

        # Test n random exterior points per region
        for k in range(n):
            target = region.exteriorPoint()
            target_region, is_valid = l.annotatedLocate(target)


        # Animate one exterior point
        if ANIMATE and target_region:
            plot(l.regions)
            plot(target_region, style='ro--')
            showPoints(target, style='bx')


def create_kirkpatrick(point_dict,triangulation):

    converted_points = [Point(p[0],p[1]) for p in point_dict]
    point_to_id = {Point(p[0],p[1]):i for i,p in enumerate(point_dict)}
    triangulation = [Point(*point_dict[t]) for t in triangulation]

    triangles = [Triangle(*[triangulation[i+j] for j in range(3)])
                for i in range(0,len(triangulation),3)]

    plt.figure()

    x = []
    y = []

    for p in point_dict:

        x.append(p[0])
        y.append(p[1])

    x.append(point_dict[0][0])
    y.append(point_dict[0][1])
    x = np.array(x)
    y = np.array(y)
    plt.plot(x, y)

    lst = []

    for t in triangles:

        x = [t.points[0].x,t.points[1].x,t.points[2].x,t.points[0].x]
        y = [t.points[0].y, t.points[1].y, t.points[2].y,t.points[0].y]

        lst.append([[t.points[0].x,t.points[0].y],[t.points[1].x,t.points[1].y],[t.points[2].x,t.points[2].y]])
        #plt.plot(x, y)

    outline = Polygon(converted_points)
    #plt.show()
    runLocator(triangles,outline,point_to_id)




for i,p in enumerate(rp):


    flattened_point  = []

    for point in p:
        flattened_point.append(point[0])
        flattened_point.append(point[1])

    #flattened_point = list(reversed(flattened_point))

    flattened.append(flattened_point)

    trig = earcut(flattened_point)

    create_kirkpatrick(p, idxes)
    #create_kirkpatrick(idxes,idxes2_out)

    t.append(trig)
    print(f"Finished {i}")

with open('data.json', 'w') as outfile:
    json.dump(flattened, outfile)

print("HI")

